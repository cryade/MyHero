// Required modules
const createError = require('http-errors');
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const session = require('express-session');
const MongoStore = require('connect-mongo')(session);
const cors = require('cors');
const mongoose = require('mongoose');
const authUtil = require('./helper/auth');
const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');
const heroRouter = require('./routes/heroes');
const categoryRouter = require('./routes/category');
const ratingRouter = require('./routes/ratings');
const config = require('./config.js');

const app = express();


// Setting connection to Database
mongoose.Promise = global.Promise;
mongoose.connect(config.DBHost, { useNewUrlParser: true, useUnifiedTopology: true });
mongoose.set('useFindAndModify', false);
mongoose.set('useCreateIndex', true);
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
// Initialise the session which is used for th log in
app.use(session({
  key: 'user_sid',
  secret: 'secret!session',
  resave: false,
  saveUninitialized: true,
  // persistent login
  store: new MongoStore({ mongooseConnection: db })
}));

// view engine setup, autogenerated by express generator
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// Set the modules
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(authUtil.isAuthenticated);
app.use('/api/', indexRouter);
app.use('/api/users', usersRouter);
app.use('/api/heroes', heroRouter);
app.use('/api/category', categoryRouter);
app.use('/api/ratings', ratingRouter);

// Cors so the frontend can reach the backend without problems
app.use(cors({
  origin: [
    'http://localhost:4200'
  ],
  credentials: true
}));

// catch 404 and forward to error handler
app.use((req, res, next) => {
  next(createError(404));
});
// error handler auto generated from express-generator
app.use((err, req, res) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});
console.log('Server is listening on port 3000!');
module.exports = app;
